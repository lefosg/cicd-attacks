stages:
  - build_image

# 2. For GitLab, the CI_JOB_TOKEN variable is automatically available in the CI/CD environment.
# The CI_JOB_TOKEN has the same privileges as the user who triggered the pipeline.
# So, be careful to who has acccess to the repo, and at what level. 

docker-build:
  stage: build_image
  image: docker:latest
  services:
    - name: docker:dind
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    RUNNER_GENERATE_ARTIFACTS_METADATA: "true"
    # 1. Or better, simply omit these variables as they default to `false`.
    CI_DEBUG_TRACE: "true"
    CI_DEBUG_SERVICES: "true"
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -t "$DOCKER_IMAGE_NAME" .
    - docker push "$DOCKER_IMAGE_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi
  after_script:
    - docker inspect --format '{{.Id}}' "$DOCKER_IMAGE_NAME" | sed 's/^sha256://' > img.hash
  artifacts:
    when: always
    paths:
      - img.hash
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile